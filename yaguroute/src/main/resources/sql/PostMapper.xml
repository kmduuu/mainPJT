<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SpringBoot 사용시 변경경된 부분 : DaoImpl 을 만들지 않는다.
<mapper namespace="UserMapper10">
-->
<mapper namespace="com.baseball.service.post.PostDao">
 	
	<resultMap id="postSelectMap" type="post">
		<result property="postNo" 				column="post_no" 			jdbcType="INTEGER"/>
		<result property="user.userId"			column="user_id" 			jdbcType="VARCHAR"/>
		<result property="user.userNickName" 	column="user_nickname" 		jdbcType="VARCHAR"/>
		<result property="user.userImage" 		column="user_image" 		jdbcType="VARCHAR"/>
		<result property="teamCode" 			column="team_code" 			jdbcType="VARCHAR"/>
		<result property="postTitle" 			column="post_title" 		jdbcType="VARCHAR"/>
		<result property="postContents" 		column="post_contents" 		jdbcType="LONGVARCHAR"/>
		<result property="postDate" 			column="post_date" 			jdbcType="TIMESTAMP"/>
		<result property="postType" 			column="post_type" 			jdbcType="INTEGER"/>
		<result property="postViews" 			column="post_views" 		jdbcType="INTEGER"/>
		<result property="notice" 				column="notice" 			jdbcType="INTEGER"/>
		<result property="postLikes" 			column="post_likes" 		jdbcType="INTEGER"/>
		<result property="postDislikes" 		column="post_dislikes" 		jdbcType="INTEGER"/>
		<association property="user" column="user_id" javaType="user" select="getUser"/>
	</resultMap>
	
	<resultMap id="userSelectMap" type="user">
		<result property="userId" 	column="user_id"	jdbcType="VARCHAR"/>
		<result property="userName" column="user_name" jdbcType="VARCHAR"/>
		<result property="userNickName" column="user_nickname" jdbcType="VARCHAR"/>
		<result property="userEmail" column="user_email" jdbcType="VARCHAR"/>
		<result property="userAddr" column="user_addr" jdbcType="VARCHAR"/>
		<result property="userPhone" column="user_phone" jdbcType="VARCHAR"/>
		<result property="userBirth" column="user_birth" jdbcType="VARCHAR"/>
		<result property="userImage" column="user_image" jdbcType="VARCHAR"/>
		<result property="userPoint" column="user_point" jdbcType="INTEGER"/>
		<result property="password" column="password" jdbcType="VARCHAR"/>
		<result property="gender" column="gender" jdbcType="CHAR"/>
		<result property="role" column="role" jdbcType="VARCHAR"/>
		<result property="withDraw" column="withdraw" jdbcType="INTEGER"/>
		<result property="teamCode" column="team_code" jdbcType="VARCHAR"/>
	</resultMap>
	
	<sql id="postList">
	 	SELECT
		    p.*,
		    (SELECT COUNT(e.like) FROM emote e WHERE e.post_no = p.post_no AND e.like = 1) AS post_likes,
		    (SELECT COUNT(e.dislike) FROM emote e WHERE e.post_no = p.post_no AND e.dislike = 1) AS post_dislikes
		FROM
		    post p
		WHERE
		    p.team_code = #{teamCode}
		    <if test="search.searchCondition != null">
		    	<if test="search.searchCondition == 0 and search.searchKeyword !='' ">
		    		AND user_id LIKE '%${search.searchKeyword}%'
		    	</if>
		    	<if test="search.searchCondition == 1 and search.searchKeyword !='' ">
		    		AND post_title LIKE '%${search.searchKeyword}%'
		    	</if>
		    </if>
		ORDER BY
		    p.post_no DESC
	</sql>
	
	<select id="getUser" parameterType="string" resultMap="userSelectMap">
		select * from user
		where user_id = #{value}
	</select>
	
	<!--해당 클럽의 전체 게시글 조회(좋아요,싫어요 수 포함 출력) -->
	<select id="getPostList" parameterType="hashMap"	resultMap="postSelectMap">
			<include refid="postList"/>
			Limit #{search.startRowNum}, #{search.pageSize}
	</select>
	
	
	<!--게시물 상세조회-->
	<select id="getPost" parameterType="int" resultMap="postSelectMap">
		SELECT * FROM post
		WHERE post_no = #{value}
	</select>
	
	<!-- 방금 insert된 auto_increment 값 get하기 -->
	<select id="getLastPostNo" resultType="int">
			select last_insert_id()
	</select>
	
	<!--특정 팀의 게시글중에서 추천수가 가장 많은 5개 게시물 list-->
	<select id="getPostBestList" parameterType="string" resultMap="postSelectMap">
		SELECT p.*, COUNT(e.like) AS post_likes
		FROM post p, emote e
		WHERE p.post_no = e.post_no AND e.like = 1 AND p.team_code = #{value}
		GROUP BY p.post_no
		ORDER BY post_likes DESC, post_views DESC
		LIMIT 5
	</select>
	
	<!--게시물 작성-->
	<insert id="addPost" parameterType="post">
	 	INSERT 
		INTO post(user_id, team_code, post_title, post_contents, post_date,post_type,notice) 
		VALUES (#{user.userId},#{teamCode},#{postTitle},#{postContents},sysdate(),#{postType},#{notice})
	</insert>
	
	<!--게시물 삭제-->
	<delete	id="deletePost" parameterType="int">
	 	DELETE FROM post 
		WHERE post_no = #{value}
	</delete>
	
	<!--게시물 수정-->
	<update	id="updatePost"	parameterType="post">
	   	UPDATE post
	   	<set>
	   		post_title 	= #{postTitle},
			post_contents = #{postContents},
			post_type 	=  #{postType},
			notice		= #{notice}
	   	</set>
	   	WHERE post_no = #{postNo}
	</update>
	
	<!-- 좋아요버튼클릭(like_procedure 호출) -->
	<insert id="like" parameterType="post" statementType="CALLABLE">
	    {CALL like_procedure(#{user.userId}, #{postNo})}
	</insert>
	
	<!-- 싫어요버튼클릭(dislike_procedure 호출) -->
	<insert id="dislike" parameterType="post" statementType="CALLABLE">
	    {CALL dislike_procedure(#{user.userId}, #{postNo})}
	</insert>
	
	<!-- 해당 게시물 총 좋아요 수 -->
	<select id="getLikes" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM emote WHERE post_no=#{value} AND `like`=1
	</select>
	
	<!-- 해당 게시물 총 싫어요 수 -->
	<select id="getDislikes" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM emote WHERE post_no=#{value} AND dislike=1
	</select>
	
	<!-- 조회수 증가 -->
	<update id="addViews" parameterType="int">
		UPDATE post SET post_views=post.post_views+1 WHERE post_no=#{value};
	</update>
	
	<!-- getPostList의 전체 레코드 수 -->
	<select id="getTotalCount" parameterType="hashMap" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="postList"/>) countTable
	</select>
	
</mapper>
	 